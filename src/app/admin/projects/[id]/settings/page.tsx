'use client'

import { useState, useEffect } from 'react'
import { useParams, useRouter } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Switch } from '@/components/ui/switch'
import { Textarea } from '@/components/ui/textarea'
import Link from 'next/link'
import { ArrowLeft, Save, RefreshCw } from 'lucide-react'

// Generate a secure random password
function generateSecurePassword(): string {
  const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz23456789!@#$%'
  let password = ''
  for (let i = 0; i < 12; i++) {
    password += chars.charAt(Math.floor(Math.random() * chars.length))
  }
  return password
}

// Generate a URL-safe random slug
function generateRandomSlug(): string {
  const chars = 'abcdefghjkmnpqrstuvwxyz23456789'
  let slug = ''
  // Generate 8-12 character slug
  const length = 8 + Math.floor(Math.random() * 5) // Random length between 8-12
  for (let i = 0; i < length; i++) {
    slug += chars.charAt(Math.floor(Math.random() * chars.length))
    // Add occasional hyphen for readability (but not at start/end)
    if (i > 0 && i < length - 1 && Math.random() < 0.2) {
      slug += '-'
    }
  }
  // Clean up any double hyphens
  return slug.replace(/-+/g, '-')
}

interface Project {
  id: string
  title: string
  slug: string
  description: string | null
  clientName: string
  clientEmail: string
  enableRevisions: boolean
  maxRevisions: number
  currentRevision: number
  restrictCommentsToLatestVersion: boolean
  hideFeedback: boolean
  sharePassword: string | null
  previewResolution: string
  watermarkEnabled: boolean
  watermarkText: string | null
}

export default function ProjectSettingsPage() {
  const params = useParams()
  const router = useRouter()
  const projectId = params?.id as string

  const [project, setProject] = useState<Project | null>(null)
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [error, setError] = useState('')
  const [success, setSuccess] = useState(false)

  // Form state
  const [title, setTitle] = useState('')
  const [description, setDescription] = useState('')
  const [clientName, setClientName] = useState('')
  const [clientEmail, setClientEmail] = useState('')
  const [enableRevisions, setEnableRevisions] = useState(false)
  const [maxRevisions, setMaxRevisions] = useState<number | ''>('')
  const [currentRevision, setCurrentRevision] = useState<number | ''>('')
  const [restrictCommentsToLatestVersion, setRestrictCommentsToLatestVersion] = useState(false)
  const [hideFeedback, setHideFeedback] = useState(false)
  const [sharePassword, setSharePassword] = useState('')
  const [updatePassword, setUpdatePassword] = useState(false)
  const [useCustomSlug, setUseCustomSlug] = useState(false) // Toggle for custom slug
  const [customSlugValue, setCustomSlugValue] = useState('') // Store custom slug value
  const [previewResolution, setPreviewResolution] = useState('720p')
  const [watermarkEnabled, setWatermarkEnabled] = useState(true)
  const [watermarkText, setWatermarkText] = useState('')
  const [useCustomWatermark, setUseCustomWatermark] = useState(false)

  // Auto-generate slug from title
  const autoGeneratedSlug = title
    .toLowerCase()
    .trim()
    .replace(/[^a-z0-9-]/g, '-')
    .replace(/-+/g, '-')
    .replace(/^-|-$/g, '')

  // Use custom slug if enabled, otherwise use auto-generated
  const slug = useCustomSlug ? customSlugValue : autoGeneratedSlug

  // Sanitize slug for live preview
  const sanitizedSlug = slug
    .toLowerCase()
    .trim()
    .replace(/[^a-z0-9-]/g, '-')
    .replace(/-+/g, '-')
    .replace(/^-|-$/g, '')

  useEffect(() => {
    async function loadProject() {
      try {
        const response = await fetch(`/api/projects/${projectId}`)
        if (!response.ok) {
          throw new Error('Failed to load project')
        }
        const data = await response.json()
        setProject(data)

        // Set form values
        setTitle(data.title)
        setDescription(data.description || '')
        setClientName(data.clientName)
        setClientEmail(data.clientEmail)
        setEnableRevisions(data.enableRevisions)
        setMaxRevisions(data.maxRevisions)
        setCurrentRevision(data.currentRevision)
        setRestrictCommentsToLatestVersion(data.restrictCommentsToLatestVersion)
        setHideFeedback(data.hideFeedback || false)
        setPreviewResolution(data.previewResolution)
        setWatermarkEnabled(data.watermarkEnabled ?? true)
        setWatermarkText(data.watermarkText || '')
        setUseCustomWatermark(!!data.watermarkText)
        
        // Check if slug was manually customized (different from auto-generated from title)
        const autoGeneratedSlug = data.title
          .toLowerCase()
          .trim()
          .replace(/[^a-z0-9-]/g, '-')
          .replace(/-+/g, '-')
          .replace(/^-|-$/g, '')
        
        if (data.slug !== autoGeneratedSlug) {
          setUseCustomSlug(true)
          setCustomSlugValue(data.slug)
        }
      } catch (err) {
        setError('Failed to load project settings')
      } finally {
        setLoading(false)
      }
    }

    loadProject()
  }, [projectId])

  async function handleSave() {
    setSaving(true)
    setError('')
    setSuccess(false)

    try {
      // Sanitize slug: lowercase, replace spaces/special chars with hyphens
      const sanitizedSlug = slug
        .toLowerCase()
        .trim()
        .replace(/[^a-z0-9-]/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, '')

      if (!sanitizedSlug) {
        setError('Share link cannot be empty')
        setSaving(false)
        return
      }

      // Ensure revision values are valid numbers before saving
      const finalMaxRevisions = typeof maxRevisions === 'number' ? maxRevisions : parseInt(String(maxRevisions)) || 1
      const finalCurrentRevision = typeof currentRevision === 'number' ? currentRevision : parseInt(String(currentRevision)) || 0

      // Validate: maxRevisions must be at least 1, currentRevision at least 0
      if (enableRevisions && finalMaxRevisions < 1) {
        setError('Maximum revisions must be at least 1')
        setSaving(false)
        return
      }

      if (enableRevisions && finalCurrentRevision < 0) {
        setError('Current revision count cannot be negative')
        setSaving(false)
        return
      }

      const updates: any = {
        title,
        slug: sanitizedSlug,
        description: description || null,
        clientName,
        clientEmail,
        enableRevisions,
        maxRevisions: enableRevisions ? finalMaxRevisions : 0,
        currentRevision: enableRevisions ? finalCurrentRevision : 0,
        restrictCommentsToLatestVersion,
        hideFeedback,
        previewResolution,
        watermarkEnabled,
        watermarkText: useCustomWatermark ? watermarkText : null,
      }

      // Only include password if user wants to update it
      if (updatePassword && sharePassword) {
        updates.sharePassword = sharePassword
      } else if (updatePassword && !sharePassword) {
        // Remove password if checkbox is checked but field is empty
        updates.sharePassword = null
      }

      const response = await fetch(`/api/projects/${projectId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updates),
      })

      if (!response.ok) {
        const data = await response.json()
        throw new Error(data.error || 'Failed to save settings')
      }

      // Update custom slug value to sanitized version if using custom slug
      if (useCustomSlug) {
        setCustomSlugValue(sanitizedSlug)
      }
      
      setSuccess(true)
      setTimeout(() => setSuccess(false), 3000)

      // Reload project data to reflect changes
      const refreshResponse = await fetch(`/api/projects/${projectId}`)
      if (refreshResponse.ok) {
        const refreshedData = await refreshResponse.json()
        setProject(refreshedData)
        setWatermarkEnabled(refreshedData.watermarkEnabled ?? true)
        setWatermarkText(refreshedData.watermarkText || '')
        setUseCustomWatermark(!!refreshedData.watermarkText)
      }

      // Refresh the page
      router.refresh()

      // Reset password fields
      if (updatePassword) {
        setSharePassword('')
        setUpdatePassword(false)
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to save settings')
    } finally {
      setSaving(false)
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <p className="text-muted-foreground">Loading...</p>
      </div>
    )
  }

  if (!project) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <p className="text-muted-foreground">Project not found</p>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-8">
        <div className="mb-4 sm:mb-6">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div className="flex flex-col sm:flex-row sm:items-center gap-3 sm:gap-4">
              <Link href={`/admin/projects/${projectId}`}>
                <Button variant="ghost" size="default">
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  <span className="hidden sm:inline">Back to Project</span>
                  <span className="sm:hidden">Back</span>
                </Button>
              </Link>
              <div className="min-w-0">
                <h1 className="text-2xl sm:text-3xl font-bold">Project Settings</h1>
                <p className="text-sm sm:text-base text-muted-foreground mt-1 truncate">{project.title}</p>
              </div>
            </div>

            <Button onClick={handleSave} variant="default" disabled={saving} size="lg" className="w-full sm:w-auto">
              <Save className="w-4 h-4 mr-2" />
              {saving ? 'Saving...' : 'Save Changes'}
            </Button>
          </div>
        </div>

        {error && (
          <div className="mb-4 sm:mb-6 p-3 sm:p-4 bg-destructive-visible border-2 border-destructive-visible rounded-lg">
            <p className="text-xs sm:text-sm text-destructive font-medium">{error}</p>
          </div>
        )}

        {success && (
          <div className="mb-4 sm:mb-6 p-3 sm:p-4 bg-success-visible border-2 border-success-visible rounded-lg">
            <p className="text-xs sm:text-sm text-success font-medium">Settings saved successfully!</p>
          </div>
        )}

        <div className="space-y-4 sm:space-y-6">
          {/* Project Details */}
          <Card>
            <CardHeader>
              <CardTitle>Project Details</CardTitle>
              <CardDescription>
                Basic project information and client details
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="title">Project Title</Label>
                <Input
                  id="title"
                  type="text"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  placeholder="e.g., Brand Video Project"
                />
                <p className="text-xs text-muted-foreground">
                  The name of this project as shown to clients and in the admin panel
                </p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="description">Project Description</Label>
                <Textarea
                  id="description"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  placeholder="e.g., Marketing video for Q4 campaign"
                  rows={3}
                />
                <p className="text-xs text-muted-foreground">
                  Optional description to help identify and organize this project
                </p>
              </div>

              <div className="space-y-4">
                <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2">
                  <div className="space-y-0.5 flex-1">
                    <Label htmlFor="useCustomSlug">Custom Link</Label>
                    <p className="text-xs text-muted-foreground">
                      Use a custom share link instead of auto-generated from project title
                    </p>
                  </div>
                  <Switch
                    id="useCustomSlug"
                    checked={useCustomSlug}
                    onCheckedChange={setUseCustomSlug}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="slug">Share Link</Label>
                  <div className="flex gap-2 items-center">
                    <span className="text-xs sm:text-sm text-muted-foreground whitespace-nowrap">
                      /share/
                    </span>
                    {useCustomSlug ? (
                      <>
                        <Input
                          id="slug"
                          type="text"
                          value={customSlugValue}
                          onChange={(e) => setCustomSlugValue(e.target.value)}
                          placeholder="e.g., custom-link-name"
                          className="flex-1"
                        />
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          onClick={() => setCustomSlugValue(generateRandomSlug())}
                          title="Generate random URL"
                        >
                          <RefreshCw className="w-4 h-4" />
                        </Button>
                      </>
                    ) : (
                      <Input
                        id="slug"
                        type="text"
                        value={autoGeneratedSlug}
                        disabled
                        className="flex-1 opacity-60"
                      />
                    )}
                  </div>
                  {useCustomSlug && customSlugValue && customSlugValue !== sanitizedSlug && (
                    <p className="text-xs text-warning">
                      Will be saved as: <span className="font-mono font-semibold">{sanitizedSlug}</span>
                    </p>
                  )}
                  <p className="text-xs text-muted-foreground">
                    {useCustomSlug 
                      ? 'Custom share link. Only lowercase letters, numbers, and hyphens allowed.'
                      : 'Auto-generated from project title. Enable "Custom Link" to set your own.'}
                  </p>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="clientName">Client Name</Label>
                <Input
                  id="clientName"
                  type="text"
                  value={clientName}
                  onChange={(e) => setClientName(e.target.value)}
                  placeholder="e.g., John Doe or Company Name"
                />
                <p className="text-xs text-muted-foreground">
                  The client's name or company name for this project
                </p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="clientEmail">Client Email</Label>
                <Input
                  id="clientEmail"
                  type="email"
                  value={clientEmail}
                  onChange={(e) => setClientEmail(e.target.value)}
                  placeholder="e.g., client@example.com"
                />
                <p className="text-xs text-muted-foreground">
                  The email address where notifications will be sent
                </p>
              </div>
            </CardContent>
          </Card>

          {/* Video Processing Settings */}
          <Card>
            <CardHeader>
              <CardTitle>Video Processing</CardTitle>
              <CardDescription>
                Configure how videos are processed and displayed
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Preview Resolution */}
              <div className="space-y-2">
                <Label htmlFor="resolution">Preview Resolution</Label>
                <select
                  id="resolution"
                  value={previewResolution}
                  onChange={(e) => setPreviewResolution(e.target.value)}
                  className="w-full px-3 py-2 bg-card border border-border rounded-md"
                >
                  <option value="720p">720p (1280x720 or 720x1280 for vertical)</option>
                  <option value="1080p">1080p (1920x1080 or 1080x1920 for vertical)</option>
                </select>
                <p className="text-xs text-muted-foreground">
                  Higher resolutions take longer to process and use more storage.
                  Vertical videos automatically adjust dimensions while maintaining aspect ratio.
                </p>
              </div>

              {/* Watermark Enable/Disable */}
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label htmlFor="watermarkEnabled">Enable Watermarks</Label>
                    <p className="text-xs text-muted-foreground">
                      Add watermarks to processed videos
                    </p>
                  </div>
                  <Switch
                    id="watermarkEnabled"
                    checked={watermarkEnabled}
                    onCheckedChange={setWatermarkEnabled}
                  />
                </div>

                {watermarkEnabled && (
                  <>
                    <div className="flex items-center justify-between">
                      <div className="space-y-0.5">
                        <Label htmlFor="customWatermark">Custom Watermark Text</Label>
                        <p className="text-xs text-muted-foreground">
                          Override default watermark format
                        </p>
                      </div>
                      <Switch
                        id="customWatermark"
                        checked={useCustomWatermark}
                        onCheckedChange={setUseCustomWatermark}
                      />
                    </div>

                    {useCustomWatermark && (
                      <div className="space-y-2">
                        <Input
                          value={watermarkText}
                          onChange={(e) => setWatermarkText(e.target.value)}
                          placeholder="e.g., CONFIDENTIAL, DRAFT, REVIEW COPY"
                          className="font-mono"
                        />
                        <p className="text-xs text-muted-foreground">
                          Leave empty to use default format: PREVIEW-{project?.title}-[version]
                        </p>
                      </div>
                    )}
                  </>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Revision Settings */}
          <Card>
            <CardHeader>
              <CardTitle>Revision Tracking</CardTitle>
              <CardDescription>
                Manage how video revisions are tracked and limited
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2">
                <div className="space-y-0.5 flex-1">
                  <Label htmlFor="enableRevisions">Enable Revision Tracking</Label>
                  <p className="text-xs text-muted-foreground">
                    Track and limit the number of video revisions
                  </p>
                </div>
                <Switch
                  id="enableRevisions"
                  checked={enableRevisions}
                  onCheckedChange={setEnableRevisions}
                />
              </div>

              {enableRevisions && (
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="maxRevisions">Maximum Revisions</Label>
                    <Input
                      id="maxRevisions"
                      type="number"
                      min="1"
                      max="20"
                      value={maxRevisions}
                      onChange={(e) => {
                        const val = e.target.value
                        if (val === '') {
                          setMaxRevisions('')
                        } else {
                          const num = parseInt(val)
                          if (!isNaN(num)) setMaxRevisions(num)
                        }
                      }}
                      onBlur={(e) => {
                        // Only validate on blur - ensure at least 1
                        const val = e.target.value
                        if (val === '') {
                          setMaxRevisions(1)
                        } else {
                          const num = parseInt(val)
                          if (isNaN(num) || num < 1) setMaxRevisions(1)
                          else if (num > 20) setMaxRevisions(20)
                        }
                      }}
                    />
                    <p className="text-xs text-muted-foreground">
                      Must be at least 1. First upload doesn't count as a revision.
                    </p>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="currentRevision">Current Revision Count</Label>
                    <Input
                      id="currentRevision"
                      type="number"
                      min="0"
                      max={typeof maxRevisions === 'number' ? maxRevisions : undefined}
                      value={currentRevision}
                      onChange={(e) => {
                        const val = e.target.value
                        if (val === '') {
                          setCurrentRevision('')
                        } else {
                          const num = parseInt(val)
                          if (!isNaN(num)) setCurrentRevision(num)
                        }
                      }}
                      onBlur={(e) => {
                        // Only validate on blur - ensure at least 0
                        const val = e.target.value
                        if (val === '') {
                          setCurrentRevision(0)
                        } else {
                          const num = parseInt(val)
                          const max = typeof maxRevisions === 'number' ? maxRevisions : 20
                          if (isNaN(num) || num < 0) setCurrentRevision(0)
                          else if (num > max) setCurrentRevision(max)
                        }
                      }}
                    />
                    <p className="text-xs text-muted-foreground">
                      Must be at least 0 (0 = initial upload, 1 = first revision, etc.)
                    </p>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Comment Settings */}
          <Card>
            <CardHeader>
              <CardTitle>Feedback & Comments</CardTitle>
              <CardDescription>
                Control how clients can leave feedback
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2">
                <div className="space-y-0.5 flex-1">
                  <Label htmlFor="hideFeedback">Hide Feedback Section</Label>
                  <p className="text-xs text-muted-foreground">
                    Completely hide the feedback and discussion window from clients
                  </p>
                </div>
                <Switch
                  id="hideFeedback"
                  checked={hideFeedback}
                  onCheckedChange={setHideFeedback}
                />
              </div>

              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2">
                <div className="space-y-0.5 flex-1">
                  <Label htmlFor="restrictComments">Restrict Comments to Latest Version</Label>
                  <p className="text-xs text-muted-foreground">
                    Only allow feedback on the most recent video version
                  </p>
                </div>
                <Switch
                  id="restrictComments"
                  checked={restrictCommentsToLatestVersion}
                  onCheckedChange={setRestrictCommentsToLatestVersion}
                />
              </div>
            </CardContent>
          </Card>

          {/* Security Settings */}
          <Card>
            <CardHeader>
              <CardTitle>Security</CardTitle>
              <CardDescription>
                Password protection for the share page
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2">
                <div className="space-y-0.5 flex-1">
                  <Label htmlFor="updatePassword">
                    {project.sharePassword ? 'Update Password' : 'Enable Password Protection'}
                  </Label>
                  <p className="text-xs text-muted-foreground">
                    {project.sharePassword
                      ? 'Currently password protected. Check to change or remove password.'
                      : 'Require a password to access the share page'}
                  </p>
                </div>
                <Switch
                  id="updatePassword"
                  checked={updatePassword}
                  onCheckedChange={setUpdatePassword}
                />
              </div>

              {updatePassword && (
                <div className="space-y-2">
                  <Label htmlFor="password">New Password</Label>
                  <div className="flex gap-2">
                    <Input
                      id="password"
                      type="text"
                      value={sharePassword}
                      onChange={(e) => setSharePassword(e.target.value)}
                      placeholder="Enter new password (leave empty to remove)"
                      className="flex-1"
                    />
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={() => setSharePassword(generateSecurePassword())}
                      title="Generate random password"
                    >
                      <RefreshCw className="w-4 h-4" />
                    </Button>
                  </div>
                  <p className="text-xs text-muted-foreground">
                    {sharePassword
                      ? 'Password will be updated when you save changes'
                      : 'Leave empty to remove password protection'}
                  </p>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Save button at bottom */}
        <div className="mt-6 sm:mt-8 flex justify-end">
          <Button onClick={handleSave} variant="default" disabled={saving} size="lg" className="w-full sm:w-auto">
            <Save className="w-4 h-4 mr-2" />
            {saving ? 'Saving...' : 'Save All Changes'}
          </Button>
        </div>
      </div>
    </div>
  )
}
